from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from telethon import sync, events
from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
import requests
import json
import hashlib
import time
import re
from telethon import TelegramClient
import webbrowser
import urllib.request
import os
import sqlite3

class RunChromeTests():
    def testMethod(self):
        selenium_url = "http://localhost:4444/wd/hub"
        caps = {'browserName': 'chrome'}
        driver = webdriver.Remote(command_executor=selenium_url, desired_capabilities=caps)
        driver.maximize_window()
        driver.get(url_rec)
        time.sleep(waitin + 10)
        driver.close()
        driver.quit()

db = sqlite3.connect('Account.db')
cur = db.cursor()

number_of_iterations = 2
start = 1

for i in range(start, number_of_iterations+1):
    complete_task = 0
    no_task = 0
    # –í—ã–≤–æ–¥ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    print("–û—á–µ—Ä–µ–¥—å –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Ññ " + str(i))
    cur.execute(f"SELECT NAME FROM Account WHERE ID = '{i}'")
    Name = str(cur.fetchone()[0])
    cur.execute(f"SELECT PHONE FROM Account WHERE ID = '{i}'")
    Phone = str(cur.fetchone()[0])
    print("–í—Ö–æ–¥–∏–º –≤ –∞–∫–∫–∞—É–Ω—Ç. –ò–º—è: " + Name + '\n–¢–µ–ª–µ—Ñ–æ–Ω: ' + Phone)

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –ë–î ID –∏ Hash'a
    cur.execute(f"SELECT API_ID FROM Account WHERE ID = '{i}'")
    api_id = str(cur.fetchone()[0])
    cur.execute(f"SELECT API_HASH FROM Account WHERE ID = '{i}'")
    api_hash = str(cur.fetchone()[0])
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    session = str("account_" + str(i))
    client = TelegramClient(session, api_id, api_hash)
    client.start()

    # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    dialogues = client.get_dialogs()
    for dialog in dialogues:
        if dialog.title == 'LTC Click Bot':
            dialog_LTC = dialog
            break

    client.send_message('LTC Click Bot', "üñ• Visit sites")
    time.sleep(3)
    # –¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
    while True:
        time.sleep(2)
        # –ï—Å–ª–∏ –¥–≤–∞–∂–¥—ã –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –º–µ–Ω—è–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç
        print("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π —É–∂–µ: " + str(no_task) + " —Ä–∞–∑")
        if no_task == 2:
            print("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–∏—á–∏–Ω–∞: '–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π'")
            break
        # –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ 10 –∑–∞–¥–∞–Ω–∏–π, –º–µ–Ω—è–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç
        print("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ –∑–∞–¥–∞–Ω–∏–π: " + str(complete_task))
        if complete_task == 10:
            print("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–∏—á–∏–Ω–∞: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ 10 –∑–∞–¥–∞–Ω–∏–π'")
            break
        
        dialogues = client.get_messages(dialog_LTC, limit=1)
        for dialog in dialogues:
            # –°—Ç–∞–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. –í–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑—Ä—ã–≤ —Å–µ—Ä–≤–µ—Ä–∞
            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ—Ä–∞–∑–∞ "to get your reward", —Ç–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã
                if re.search('to get your reward', dialog.message):
                    print("–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ")
                    print('\n', dialog.message)
                    dialog = str(dialog.message)
                    dialog = dialog.replace('You must stay on the site for', '').replace('seconds to get your reward.', '')
                    waitin = int(dialog)
                    print ("–ñ–¥–∞—Ç—å –ø—Ä–∏–¥–µ—Ç—Å—è: ", waitin)
                    client.send_message('LTC Click Bot', "/visit")
                    time.sleep(1)
                    dialogues_new = client.get_messages(dialog_LTC, limit=1)
                    for dialog_new in dialogues_new:
                        button_data = dialog_new.reply_markup.rows[1].buttons[1].data
                        message_id = dialog_new.id
                        print("–ü–µ—Ä–µ—Ö–æ–∂—É –ø–æ —Å—Å—ã–ª–∫–µ")
                        time.sleep(2)
                        url_rec = messages[0].reply_markup.rows[0].buttons[0].url
                        ch = RunChromeTests()
                        ch.testMethod()
                        fp = urllib.request.urlopen(url_rec)
                        mybytes = fp.read()
                        mystr = mybytes.decode("utf8")
                        fp.close()
                        if re.search('Switch to reCAPTCHA', mystr):
                            resp = client(GetBotCallbackAnswerRequest(
                                'LTC Click Bot',    
                                message_id,
                                data=button_data
                            ))
                            print("–ö–ê–ü–ß–ê!")

                        else:
                            time.sleep(2)
                elif re.search('Sorry', dialog.message):
                    print("–ù–∞–π–¥–µ–Ω–æ Sorry")
                    no_task = no_task + 1
                    print(no_task)

                else:
                    messages = client.get_messages('Litecoin_click_bot')
                    url_rec = messages[0].reply_markup.rows[0].buttons[0].url
                    f = open("per10.txt")
                    fd = f.read()
                    if fd == url_rec: 
                        print("–ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
                        dialogues_new = client.get_messages(dialog_LTC, limit=1)
                        for dialog_new in dialogues_new:
                            button_data = dialog_new.reply_markup.rows[1].buttons[1].data
                            message_id = dialog_new.id
                            from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
                            resp = client(GetBotCallbackAnswerRequest(
                                dialog_LTC,
                                message_id,
                                data=button_data
                            ))
                            time.sleep(2)
                    else:
                        waitin = 15
                        data1 = requests.get(url_rec).json
                        print(data1)

                        my_file = open('per10.txt', 'w')
                        my_file.write(url_rec)
                        print("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª–µ —Å–¥–µ–ª–∞–Ω–∞")
                        time.sleep(4)
                        complete_task = complete_task + 1

                print('\n–¶–∏–∫–ª')
            except BaseException as err:
                print('ERROR')
                print(err)
    time.sleep(1)
